name: Release

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    env:
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows, aarch64-macos]
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/dploy.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/dploy" "dist/"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.build }}
          path: dist
